"use strict";

/* 
  -create a POST route for /signup
    - accepts eitehr json or FORM data with keysl "username and "password"
    - creats a new user record in a mongo database
  - creat a POST route for /signin
    - router.post('/signin', basicAuth, (req, res) => {})
    - Uses middleware (BasicAuthentication) to validate the user
    - When validated, send a JSON object as the response with the following properties:
      - token: The token generated by the users model
      - user: The usersâ€™ database record
      - Additionally, set a Cookie and a Token header on the response, with the token as the value
  - Create a GET route for /users that returns a JSON object with all users
    - Stretch Goal: have this route also use the middleware for authentication so that you cannot see the user list without a valid username and password
*/

const express = require("express");
const users = require("./models/users-model.js");
const basicAuth = require("./middleware/basic.js");
const bearer = require("./middleware/bearer.js");
const permissions = require("./middleware/permissions.js");

const router = express.Router();

router.post("/signup", async (req, res, next) => {
  try {
    let userObj = {
      username: req.body.username,
      password: req.body.password,
      role: req.body.role,
    };

    let record = new users(userObj);

    let newUser = await record.save();
    let token = record.generateToken();

    res.set("auth", token);
    let userObject = {
      token: token,
      user: newUser,
    };

    res.status(201).send(userObject);
  } catch (e) {
    next(e.message);
  }
});

router.post("/signin", basicAuth, (req, res, next) => {
  console.log(req.user);
  res.set("auth", req.token);
  let output = {
    token: req.token,
    user: req.username,
  };
  res.status(200).json(output);
});

router.get("/secret", bearer, (req, res) => {
  res.status(200).send(`Welcome, ${req.user.username}`);
});

router.get("/article", bearer, permissions("read"), (req, res) => {
  res.status(200).send("You have permission to READ");
});

router.post("/article", bearer, permissions("create"), (req, res) => {
  res.status(200).send("You have permission to CREATE");
});

router.put("/article", bearer, permissions("update"), (req, res) => {
  res.status(200).send("You have permission to UPDATAE");
});

router.delete("/article", bearer, permissions("delete"), (req, res) => {
  res.status(200).send("You have permission to DELETE")
})



module.exports = router;
